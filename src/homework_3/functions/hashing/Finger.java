package homework_3.functions.hashing;

import java.util.ArrayList;

public class Finger {

    // DO NOT write FFT.WINDOW_SIZE / 44100, it equals to 0 forever!!
//    public static final double scaling = FFT.WINDOW_SIZE / 44100.0;

    public static final int N = 2;

    private ArrayList<double[]> constel_data=new ArrayList<>();
    private int id;

    /**
     * For songs about to add into DB
     * @param id
     */
    public Finger(int id) {
        this.id = id;
    }

    /**
     * For songs about to be searched
     */
    public Finger() {
        this.id = -1;
    }

    /**
     * Append a column of frequency peaks to the constellation map.
     * A frequency peak is a frequency value whose amplitude is the highest among
     * all frequencies in a frequency interval.
     *
     * @param freqDomain The frequency domain generated by FFT.
     */
    public void append(double[] freqDomain) {
        /**
         * TODO: Either find N frequencies with the highest amplitude(energy),
         * or find the frequency with the max energy within each interval.
         */
//        constel_data=new ArrayList<>();

        double[] freqPeaks = new double[N];
//        for(int i=0;i<N;i++){
//            freqPeaks[i]=freqDomain[i];
//        }
//        for(int j=N;j<freqDomain.length;j++){
//            for(int i=0;i<N-1;i++){
//                if( freqPeaks[i]>freqPeaks[i+1]){
//                    double y=freqPeaks[i];
//                    freqPeaks[i]=freqPeaks[i+1];
//                    freqPeaks[i+1]=y;
//                }
//                if(freqDomain[j]>freqPeaks[0])
//                    freqPeaks[0]=(int)freqDomain[j];
//            }
//        }
        double max = 0;
        int temp=0;
        for(int i=0;i<N;i++){
            max=0;temp=0;
            for(int j=0;j<Fft.WINDOW_SIZE;j++){
                if (freqDomain[j]>max){
                    temp=j;
                    max=freqDomain[j];
                }
            }
            freqPeaks[i]=temp;
            freqDomain[temp]=0;
        }
        constel_data.add(freqPeaks);
    }

    /**
     * Generate fingerprints using Combinational Hash.
     * For each frequency peak, generate 6 fingerprints with its 6 successors.
     *
     * @return
     */
    public ArrayList<ShazamHash> combineHash() {
        int interval_num=N;
//        System.out.println("constel_data size: "+(constel_data.size()));
        if (constel_data.size() < 3)
            throw new RuntimeException("Too few frequency peaks");
        ArrayList<ShazamHash> hashes = new ArrayList<>();
        for (int i = 0; i < constel_data.size() - 2; ++i) {
            for (int k = 0; k < interval_num; ++k) {
                for (int j = 1; j <= 2; ++j) {
                    for (int kk = 1; kk < interval_num; ++kk) {
                        ShazamHash hash = new ShazamHash();
                        hash.SetF1(constel_data.get(i)[k]);
                        hash.SetF2(constel_data.get(i + j)[kk] );
                        hash.SetDt(j);
                        hash.SetOffset(i);
                        hash.setId(id);
                        hashes.add(hash);
                    }
                }
            }
        }
        return hashes;
    }
}